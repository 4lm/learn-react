{"version":3,"sources":["components/Posts.js","actions/postActions.js","actions/types.js","components/Postform.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Posts","this","props","fetchPosts","nextProps","newPost","posts","unshift","postItems","map","post","react_default","a","createElement","key","id","title","body","Component","connect","state","items","item","dispatch","fetch","then","res","json","type","payload","Postform","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","bind","assertThisInitialized","onSubmit","e","setState","defineProperty","target","name","value","preventDefault","createPost","postData","method","headers","content-type","JSON","stringify","intialState","combineReducers","arguments","length","undefined","action","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","className","components_Postform","components_Posts","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f0e5622.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { fetchPosts } from '../actions/postActions'\n\nclass Posts extends Component {\n  componentWillMount() {\n    this.props.fetchPosts();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if(nextProps.newPost) {\n      this.props.posts.unshift(nextProps.newPost)\n    }\n  }\n\n  render() {\n    const postItems = this.props.posts.map(post => (\n      <div key={post.id}>\n        <h3>{post.title}</h3>\n        <p>{post.body}</p>\n      </div>\n    ));\n    return (\n      <div>\n        <h1>Posts</h1>\n        {postItems}\n      </div>\n    )\n  }\n}\n\nPosts.propTypes = {\n  fetchPosts: PropTypes.func.isRequired,\n  posts: PropTypes.array.isRequired,\n  newPost: PropTypes.object\n}\n\nconst mapStateToProps = state => ({\n  posts: state.posts.items,\n  newPost: state.posts.item\n})\n\nexport default connect(mapStateToProps, { fetchPosts })(Posts);\n","import { FETCH_POSTS, NEW_POST } from './types'\n\nexport const fetchPosts = () => dispatch => {\n    fetch('https://jsonplaceholder.typicode.com/posts?_limit=20')\n        .then(res => res.json())\n        .then(posts => dispatch({\n            type: FETCH_POSTS,\n            payload: posts\n        }))\n}\n\nexport const createPost = (postData) => dispatch => {\n    fetch('https://jsonplaceholder.typicode.com/posts', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n    .then(res => res.json())\n    .then(post => dispatch({\n        type: NEW_POST,\n        payload: post\n    }))\n}\n","export const FETCH_POSTS = 'FETCH_POSTS'\nexport const NEW_POST = 'NEW_POST'\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { createPost } from '../actions/postActions'\n\nclass Postform extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            title: '',\n            body: ''\n        }\n        this.onChange = this.onChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n    }\n\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    onSubmit(e) {\n        e.preventDefault()\n        const post = {\n            title: this.state.title,\n            body: this.state.body\n        }\n\n        this.props.createPost(post)\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Add Post</h1>\n                <form onSubmit={this.onSubmit}>\n                    <div>\n                        <label>Title: </label><br />\n                        <input type=\"text\" name=\"title\" onChange={this.onChange} value={this.state.title} />\n                    </div>\n                    <br />\n                    <div>\n                        <label>Body: </label><br />\n                        <textarea name=\"body\" onChange={this.onChange} value={this.state.body} />\n                    </div>\n                    <br />\n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nPostform.propTypes = {\n    createPost: PropTypes.func.isRequired\n}\n\nexport default connect(null, { createPost })(Postform);\n","import { FETCH_POSTS, NEW_POST } from '../actions/types'\n\nconst intialState = {\n    items: [],\n    item: {}\n}\n\nexport default function (state = intialState, action) {\n    switch (action.type) {\n        case FETCH_POSTS:\n            return {\n                ...state,\n                items: action.payload\n            }\n        case NEW_POST:\n            return {\n                ...state,\n                item: action.payload\n            }\n        default:\n            return state\n    }\n}\n","import { combineReducers } from 'redux'\nimport postReducer from './postReducer'\n\nexport default combineReducers({\n    posts: postReducer\n})","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\n\nconst initialState = {}\nconst middleware = [thunk]\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n)\n\nexport default store\n","import React, { Component } from 'react'\nimport './App.css'\nimport { Provider } from 'react-redux'\n\nimport Posts from './components/Posts'\nimport Postform from './components/Postform'\n\nimport store from './store'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <Postform />\n          <hr />\n          <Posts />\n        </div>\n      </Provider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}